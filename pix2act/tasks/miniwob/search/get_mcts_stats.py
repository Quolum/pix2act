# Copyright 2023 The pix2act Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

r"""Aggregate statistics over episodes generated by MCTS.
"""

from absl import app
from absl import flags
import apache_beam as beam
from pix2act.tasks.miniwob import episode_pb2


FLAGS = flags.FLAGS


flags.DEFINE_string("dir", "", "Input directory.")

flags.DEFINE_string("output", "", "Output txt file.")


REWARD_THRESOLD = 0.8


def _get_metrics(episode):
  yield (f"{episode.task_name}_complete", 1)
  if episode.complete and episode.raw_reward > REWARD_THRESOLD:
    yield (f"{episode.task_name}_success", 1)


def pipeline(root):
  """Configure beam pipeline."""

  _ = (
      root
      | "Read"
      >> beam.io.ReadFromTFRecord(
          f"{FLAGS.dir}/*.tfrecord",
          coder=beam.coders.ProtoCoder(episode_pb2.Episode),
      )
      | "Reshuffle" >> beam.Reshuffle()
      | "GetMetrics" >> beam.ParDo(_get_metrics)
      | "Aggregate" >> beam.CombinePerKey(sum)
      | "WriteResults" >> beam.io.WriteToText(FLAGS.output)
  )


def main(argv):
  with beam.Pipeline(
      options=beam.options.pipeline_options.PipelineOptions(argv[1:])) as root:
    pipeline(root)


if __name__ == "__main__":
  app.run(main)
